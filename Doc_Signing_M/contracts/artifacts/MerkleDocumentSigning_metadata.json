{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_merkleRoot",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "AccountWhitelisted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "admin",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "isAdded",
						"type": "bool"
					}
				],
				"name": "AdminUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "signer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "DocumentSigned",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "newRoot",
						"type": "bytes32"
					}
				],
				"name": "MerkleRootUpdated",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "addAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "accounts",
						"type": "address[]"
					}
				],
				"name": "addMultipleToWhitelist",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "addToWhitelist",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "admins",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getWhitelistedAccounts",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "proof",
						"type": "bytes32[]"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "isWhitelisted",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "manualWhitelist",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "merkleRoot",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "removeAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "proof",
						"type": "bytes32[]"
					}
				],
				"name": "signDocument",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalDocumentsSigned",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_newRoot",
						"type": "bytes32"
					}
				],
				"name": "updateMerkleRoot",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "proof",
						"type": "bytes32[]"
					}
				],
				"name": "whitelistAndTrack",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "whitelistTimestamp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "whitelistedAccounts",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "A contract that manages a whitelist using Merkle Trees and manual mapping.      Whitelisted users can sign documents, and admins can manage accounts.",
			"kind": "dev",
			"methods": {
				"addAdmin(address)": {
					"details": "Add an admin account.",
					"params": {
						"account": "Address to grant admin rights."
					}
				},
				"addMultipleToWhitelist(address[])": {
					"details": "Add multiple accounts to the manual whitelist at once.",
					"params": {
						"accounts": "Array of addresses to whitelist."
					}
				},
				"addToWhitelist(address)": {
					"details": "Add an account to the manual whitelist.",
					"params": {
						"account": "Address to whitelist."
					}
				},
				"constructor": {
					"details": "Constructor initializes the owner and Merkle Root.",
					"params": {
						"_merkleRoot": "Initial Merkle Root."
					}
				},
				"getWhitelistedAccounts()": {
					"details": "Get all whitelisted accounts.",
					"returns": {
						"_0": "address[] Array of whitelisted accounts."
					}
				},
				"isWhitelisted(bytes32[],address)": {
					"details": "Verifies if an account is whitelisted using Merkle Proof or manual mapping.",
					"params": {
						"account": "Address to verify.",
						"proof": "Merkle Proof provided by the user."
					},
					"returns": {
						"_0": "bool Returns true if the address is whitelisted."
					}
				},
				"removeAdmin(address)": {
					"details": "Remove an admin account.",
					"params": {
						"account": "Address to revoke admin rights."
					}
				},
				"signDocument(bytes32[])": {
					"details": "Sign a document if the caller is whitelisted.",
					"params": {
						"proof": "Merkle Proof."
					}
				},
				"updateMerkleRoot(bytes32)": {
					"details": "Updates the Merkle Root and resets whitelist tracking.",
					"params": {
						"_newRoot": "The new Merkle Root."
					}
				},
				"whitelistAndTrack(bytes32[])": {
					"details": "Whitelist and track the caller if verified using a Merkle Proof.",
					"params": {
						"proof": "Merkle Proof."
					}
				}
			},
			"title": "MerkleDocumentSigning",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"updateMerkleRoot(bytes32)": {
					"notice": "Resets the manual whitelist and whitelistedAccounts list, but retains manual whitelisted accounts."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Doc_Signing_M.sol": "MerkleDocumentSigning"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/utils/cryptography/Hashes.sol": {
			"keccak256": "0x631dc1958d5308bd2d9f91190bbcde4f9ffb9d9401ce8d358c17b35f1a942bb7",
			"license": "MIT",
			"urls": [
				"bzz-raw://e7ef16d9a6f57eae9ab275116eaba1e8de70efd3d0e3682b1585b8f069d9c3f9",
				"dweb:/ipfs/QmR3JQHAyv4sNWnRHeiC6oaz8Bqn8rtzu5sdAqAJRtBqpj"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
			"keccak256": "0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134",
			"license": "MIT",
			"urls": [
				"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6",
				"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw"
			]
		},
		"contracts/Doc_Signing_M.sol": {
			"keccak256": "0x5c806042d9bec127b306a75f13a845e5ef0fa58c2169bba96265082a21e0c54e",
			"license": "MIT",
			"urls": [
				"bzz-raw://d43c507d602729f4f27ee82e1a9e1a7529a400f848886d68052485db9e161f0f",
				"dweb:/ipfs/QmQ5XqgddmEeZ773xDh3TPi3V7WErgspMdEBBejXrXEohg"
			]
		}
	},
	"version": 1
}